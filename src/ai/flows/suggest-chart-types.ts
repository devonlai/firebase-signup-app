// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A chart type suggestion AI agent.
 *
 * - suggestChartTypes - A function that suggests chart types based on data.
 * - SuggestChartTypesInput - The input type for the suggestChartTypes function.
 * - SuggestChartTypesOutput - The return type for the suggestChartTypes function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestChartTypesInputSchema = z.object({
  dataDescription: z
    .string()
    .describe('The description of the dataset to be visualized.'),
});
export type SuggestChartTypesInput = z.infer<typeof SuggestChartTypesInputSchema>;

const SuggestChartTypesOutputSchema = z.object({
  suggestedChartTypes: z
    .array(z.string())
    .describe('The suggested chart types for the dataset.'),
  reasoning: z
    .string()
    .describe('The reasoning behind the suggested chart types.'),
});
export type SuggestChartTypesOutput = z.infer<typeof SuggestChartTypesOutputSchema>;

export async function suggestChartTypes(
  input: SuggestChartTypesInput
): Promise<SuggestChartTypesOutput> {
  return suggestChartTypesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestChartTypesPrompt',
  input: {schema: SuggestChartTypesInputSchema},
  output: {schema: SuggestChartTypesOutputSchema},
  prompt: `You are an expert data visualization consultant. Given a description of a dataset, you will suggest appropriate chart types to visualize the data.

Description of the dataset: {{{dataDescription}}}

Please suggest chart types that would be appropriate for visualizing this data, and explain your reasoning.

Your output should be a JSON object with two fields:
- suggestedChartTypes: An array of strings, where each string is a suggested chart type (e.g., "line chart", "bar chart", "scatter plot").
- reasoning: A string explaining the reasoning behind the suggested chart types.
`,
});

const suggestChartTypesFlow = ai.defineFlow(
  {
    name: 'suggestChartTypesFlow',
    inputSchema: SuggestChartTypesInputSchema,
    outputSchema: SuggestChartTypesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
